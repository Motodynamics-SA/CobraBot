name: Security Scan

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
            - release
    schedule:
        # Run every day at 2 AM UTC
        - cron: '0 2 * * *'

jobs:
    # Basic security checks that must pass before other jobs
    essential-security:
        name: Essential Security Checks
        runs-on: ubuntu-latest
        outputs:
            secrets-clean: ${{ steps.secrets-check.outputs.clean }}
            env-files-clean: ${{ steps.env-check.outputs.clean }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  # Fetch full history for comprehensive scan
                  fetch-depth: 0

            - name: Environment File Validation
              id: env-check
              run: |
                  echo "🔍 Checking for accidentally committed environment files..."

                  # Check for .env files
                  if find . -name ".env*" -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./.github/*" -not -name ".env.example" -not -name ".env.*.example" -not -name ".env.testing" -not -name ".env.ci" -type f | grep -q .; then
                      echo "❌ Found potentially sensitive .env files:"
                      find . -name ".env*" -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./.github/*" -not -name ".env.example" -not -name ".env.*.example" -not -name ".env.testing" -not -name ".env.ci" -type f
                      echo "clean=false" >> "$GITHUB_OUTPUT"
                      exit 1
                  fi

                  echo "✅ No sensitive environment files found"
                  echo "clean=true" >> "$GITHUB_OUTPUT"

            - name: File Permissions Check
              run: |
                  echo "🔍 Checking for overly permissive file permissions..."

                  # Check for world-writable files
                  if find . -type f -perm -002 -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./.git/*" | grep -q .; then
                      echo "❌ Found world-writable files:"
                      find . -type f -perm -002 -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./.git/*"
                      exit 1
                  fi

                  # Check for executable files that shouldn't be
                  if find . -type f -name "*.php" -perm -111 -not -path "./vendor/*" -not -path "./artisan" | grep -q .; then
                      echo "⚠️ Found executable PHP files (may be intentional):"
                      find . -type f -name "*.php" -perm -111 -not -path "./vendor/*" -not -path "./artisan"
                  fi

                  echo "✅ File permissions look secure"

            - name: Hardcoded Secrets Patterns
              run: |
                  echo "🔍 Scanning for hardcoded secrets patterns..."

                  # Define patterns for common secrets
                  patterns=(
                      'password\s*=\s*["\x27][^"\x27\s]{8,}'
                      'api[_-]?key\s*[=:]\s*["\x27][A-Za-z0-9]{20,}'
                      'secret[_-]?key\s*[=:]\s*["\x27][A-Za-z0-9]{20,}'
                      'access[_-]?token\s*[=:]\s*["\x27][A-Za-z0-9]{20,}'
                      'private[_-]?key\s*[=:]\s*["\x27][A-Za-z0-9+/=]{40,}'
                  )

                  found_secrets=false
                  for pattern in "${patterns[@]}"; do
                      if grep -rEi "$pattern" . --include="*.php" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.git; then
                          found_secrets=true
                      fi
                  done

                  if [ "$found_secrets" = true ]; then
                      echo "❌ Found potential hardcoded secrets! Please review the matches above."
                      exit 1
                  fi

                  echo "✅ No hardcoded secrets patterns detected"

            - name: Download and Run Gitleaks
              id: secrets-check
              run: |
                  # Download Gitleaks binary
                  curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz | tar -xz

                  # Run Gitleaks scan with SARIF output for GitHub Security
                  echo "🔍 Running Gitleaks secret scan..."
                  ./gitleaks detect --config=.gitleaks.toml --verbose --report-format=sarif --report-path=gitleaks.sarif || exit_code=$?

                  # Check results
                  if [ "${exit_code:-0}" -eq 1 ]; then
                      echo "❌ Gitleaks found potential secrets in the repository!"
                      echo "Please review the findings above and remove any secrets before merging."
                      echo "clean=false" >> "$GITHUB_OUTPUT"
                      exit 1
                  fi

                  echo "✅ No secrets detected by Gitleaks - repository is clean!"
                  echo "clean=true" >> "$GITHUB_OUTPUT"

            - name: Upload Gitleaks SARIF to GitHub Security
              if: always() && hashFiles('gitleaks.sarif') != ''
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: gitleaks.sarif
                  category: gitleaks

    license-compliance:
        name: License Compliance Check
        runs-on: ubuntu-latest
        needs: essential-security
        if: needs.essential-security.outputs.secrets-clean == 'true'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.4
                  tools: composer:v2

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Install Dependencies
              run: |
                  composer install --no-interaction --prefer-dist --optimize-autoloader
                  npm ci

            - name: Check PHP License Compliance
              run: |
                  echo "🔍 Checking PHP package licenses..."

                  # Get license information
                  composer licenses --format=json > php-licenses.json

                  # Define prohibited licenses (adjust as needed)
                  prohibited_licenses=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")

                  # Check for prohibited licenses
                  for license in "${prohibited_licenses[@]}"; do
                      if grep -q "$license" php-licenses.json; then
                          echo "❌ Found prohibited license: $license"
                          composer licenses | grep "$license"
                          exit 1
                      fi
                  done

                  echo "✅ All PHP licenses are compliant"

            - name: Check Node License Compliance
              run: |
                  echo "🔍 Checking Node.js package licenses..."

                  # Install license-checker
                  npm install -g license-checker

                  # Check licenses
                  license-checker --onlyAllow 'MIT;Apache-2.0;BSD;ISC;CC0-1.0;Unlicense;WTFPL' --production

    owasp-dependency-check:
        name: OWASP Dependency Check
        runs-on: ubuntu-latest
        needs: essential-security
        if: needs.essential-security.outputs.secrets-clean == 'true'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Run OWASP Dependency Check
              uses: dependency-check/Dependency-Check_Action@main
              with:
                  project: 'price-updater'
                  path: '.'
                  format: 'SARIF'
                  out: 'dependency-check-report'
                  args: >
                      --enableRetired
                      --enableExperimental
                      --nvdApiDelay 2000

            - name: Upload OWASP Results to GitHub Security
              if: always()
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: dependency-check-report/dependency-check-report.sarif
                  category: dependency-check

    dependency-scan:
        name: Dependency Security Scan
        runs-on: ubuntu-latest
        needs: [essential-security, license-compliance]
        if: needs.essential-security.outputs.secrets-clean == 'true'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.4
                  tools: composer:v2

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Copy Environment File
              run: cp .env.testing .env

            - name: Install PHP Dependencies
              run: composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader

            - name: Install Node Dependencies
              run: npm ci --production

            - name: Run PHP Security Audit
              run: composer audit --format=table

            - name: Run Node Security Audit
              run: npm audit --audit-level=high

    code-quality:
        name: Code Quality & Static Analysis
        runs-on: ubuntu-latest
        needs: [essential-security, dependency-scan]
        if: needs.essential-security.outputs.secrets-clean == 'true'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.4
                  tools: composer:v2

            - name: Copy Environment File
              run: cp .env.testing .env

            - name: Install Dependencies
              run: composer install --no-interaction --prefer-dist --optimize-autoloader

            - name: Run PHPStan
              run: ./vendor/bin/phpstan analyse --memory-limit=2G

            - name: Run PHP Code Style Check
              run: ./vendor/bin/pint --test

    security-headers:
        name: Security Headers Check
        runs-on: ubuntu-latest
        needs: [essential-security, code-quality]
        if: github.event_name == 'pull_request' && needs.essential-security.outputs.secrets-clean == 'true'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Check Security Headers Middleware
              run: |
                  if [ -f "app/Http/Middleware/AddSecurityHeaders.php" ]; then
                    echo "✅ Security headers middleware found"
                    grep -q "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection\|Strict-Transport-Security" app/Http/Middleware/AddSecurityHeaders.php && echo "✅ Basic security headers are configured" || echo "❌ Missing basic security headers"
                  else
                    echo "❌ Security headers middleware not found"
                    exit 1
                  fi

            - name: Check HTTPS Configuration
              run: |
                  if grep -q "HTTPS\|SSL" config/app.php || grep -q "secure" config/session.php; then
                    echo "✅ HTTPS configuration found"
                  else
                    echo "⚠️ Consider configuring HTTPS for production"
                  fi
            - name: Check Content Security Policy (CSP)
              run: |
                  if grep -q "Content-Security-Policy" app/Http/Middleware/AddSecurityHeaders.php; then
                    echo "✅ Content Security Policy (CSP) is configured"
                  else
                    echo "⚠️ Consider adding a Content Security Policy (CSP) for enhanced security"
                  fi
            - name: Check Secure Cookies
              run: |
                  if grep -q "'secure' => env('SESSION_SECURE_COOKIE', true)" config/session.php; then
                    echo "✅ Secure cookies are enabled"
                  else
                    echo "⚠️ Consider enabling secure cookies in config/session.php"
                  fi
            - name: Check HSTS Configuration
              run: |
                  if grep -q "Strict-Transport-Security" app/Http/Middleware/AddSecurityHeaders.php; then
                    echo "✅ HSTS is configured"
                  else
                    echo "⚠️ Consider adding HSTS for enhanced security"
                  fi
            - name: Check Referrer Policy
              run: |
                  if grep -q "Referrer-Policy" app/Http/Middleware/AddSecurityHeaders.php; then
                    echo "✅ Referrer Policy is configured"
                  else
                    echo "⚠️ Consider adding a Referrer Policy for enhanced privacy"
                  fi
            - name: Check X-Content-Type-Options
              run: |
                  if grep -q "X-Content-Type-Options" app/Http/Middleware/AddSecurityHeaders.php; then
                    echo "✅ X-Content-Type-Options is configured"
                  else
                    echo "⚠️ Consider adding X-Content-Type-Options to prevent MIME type sniffing"
                  fi
            - name: Check X-Frame-Options
              run: |
                  if grep -q "X-Frame-Options" app/Http/Middleware/AddSecurityHeaders.php; then
                    echo "✅ X-Frame-Options is configured"
                  else
                    echo "⚠️ Consider adding X-Frame-Options to prevent clickjacking"
                  fi
            - name: Check X-XSS-Protection
              run: |
                  if grep -q "X-XSS-Protection" app/Http/Middleware/AddSecurityHeaders.php; then
                    echo "✅ X-XSS-Protection is configured"
                  else
                    echo "⚠️ Consider adding X-XSS-Protection to mitigate XSS attacks"
                  fi
