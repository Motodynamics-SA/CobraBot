# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy PHP app to Azure Web App - cobrabot

on:
    push:
        branches: [release]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read

        steps:
            - uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'

            - name: Set production environment
              run: echo "APP_ENV=production" >> $GITHUB_ENV

            - name: Check if composer.json exists
              id: check_files
              uses: andstor/file-existence-action@v1
              with:
                  files: 'composer.json'

            - name: Run composer install if composer.json exists
              if: steps.check_files.outputs.files_exists == 'true'
              run: |
                  composer validate --no-check-publish
                  composer install --prefer-dist --no-progress --no-interaction --no-dev

            - name: Remove any .env files before deployment
              run: |
                  find . -name ".env*" -type f -delete
                  echo "Removed any .env files"

            - name: Verify no .env files remain
              run: |
                  if find . -name ".env*" -type f | grep -q .; then
                    echo "❌ .env files still exist:"
                    find . -name ".env*" -type f
                    exit 1
                  else
                    echo "✅ No .env files found"
                  fi

            - name: Upload artifact for deployment job
              uses: actions/upload-artifact@v4
              with:
                  name: php-app
                  path: .
                  if-no-files-found: error
                  retention-days: 1

    deploy:
        runs-on: ubuntu-latest
        needs: build

        env:
            RG: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
            APP: ${{ secrets.AZURE_WEBAPP_NAME }}

        steps:
            - name: Download artifact from build job
              uses: actions/download-artifact@v4
              with:
                  name: php-app

            # Login to Azure for access restriction + startup command management
            - name: Azure login (Service Principal)
              uses: azure/login@v2
              with:
                  creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

            - name: Get runner public IP
              id: ip
              run: echo "PUBLIC_IP=$(curl -s https://api.ipify.org)" >> "$GITHUB_OUTPUT"

            - name: Allowlist runner IP on SCM (Kudu)
              run: |
                  echo "Allowing ${{ steps.ip.outputs.PUBLIC_IP }}/32 on SCM for $APP..."
                  az webapp config access-restriction add \
                    -g "$RG" -n "$APP" \
                    --rule-name "gh-runner-${{ steps.ip.outputs.PUBLIC_IP }}" \
                    --action Allow \
                    --ip-address "${{ steps.ip.outputs.PUBLIC_IP }}/32" \
                    --priority 120 \
                    --scm-site true

            - name: Deploy to Azure Web App
              id: deploy-to-webapp
              uses: azure/webapps-deploy@v3
              with:
                  app-name: 'cobrabot'
                  slot-name: 'Production'
                  package: .
                  publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B408F1FA702C414EBD92E3521D98D7CE }}

            - name: Set startup command
              uses: azure/cli@v1
              with:
                  inlineScript: |
                      az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
                      az webapp config set \
                        --name ${{ secrets.AZURE_WEBAPP_NAME }} \
                        --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
                        --startup-file ./azure/azure-startup.sh

            # Always clean up the temporary rule, even on failure
            - name: Remove temporary SCM IP rule
              if: always()
              run: |
                  RULE_NAME="gh-runner-${{ steps.ip.outputs.PUBLIC_IP }}"
                  echo "Removing temporary rule $RULE_NAME from SCM..."
                  az webapp config access-restriction remove \
                    -g "$RG" -n "$APP" \
                    --rule-name "$RULE_NAME" \
                    --scm-site true
