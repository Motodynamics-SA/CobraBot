# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# This workflow:
# - Builds the Laravel app
# - Removes any .env* files from the artifact
# - Temporarily allows the current runner's public IP on BOTH main + SCM (Kudu)
# - Ensures Public Network Access is enabled for the deploy
# - Deploys via Publish Profile
# - Sets the startup script
# - Cleans up the temporary IP rules

name: Build and deploy PHP app to Azure Web App - cobrabot

on:
    push:
        branches: [release]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read

        steps:
            - uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Check if composer.json exists
              id: check_files
              uses: andstor/file-existence-action@v1
              with:
                  files: 'composer.json'

            - name: Install PHP dependencies (no-dev) if composer.json exists
              if: steps.check_files.outputs.files_exists == 'true'
              run: |
                  composer validate --no-check-publish
                  composer install --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader
                  php artisan optimize || true
                  php artisan config:cache || true
                  php artisan route:cache || true
                  php artisan view:cache || true

            - name: Install npm dependencies
              run: npm ci

            - name: Build frontend assets
              run: npm run prod

            - name: Set production environment
              run: echo "APP_ENV=production" >> $GITHUB_ENV

            - name: Remove any .env files before deployment
              run: |
                  find . -name ".env*" -type f -delete
                  echo "Removed any .env files"

            - name: Verify no .env files remain
              run: |
                  if find . -name ".env*" -type f | grep -q .; then
                    echo "❌ .env files still exist:"
                    find . -name ".env*" -type f
                    exit 1
                  else
                    echo "✅ No .env files found"
                  fi

            - name: Upload artifact for deployment job
              uses: actions/upload-artifact@v4
              with:
                  name: php-app
                  path: .
                  if-no-files-found: error
                  retention-days: 1

    deploy:
        runs-on: ubuntu-latest
        needs: build
        permissions:
            contents: read

        env:
            RG: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
            APP: ${{ secrets.AZURE_WEBAPP_NAME }}

        steps:
            - name: Download artifact from build job
              uses: actions/download-artifact@v4
              with:
                  name: php-app

            - name: Azure login (Service Principal)
              uses: azure/login@v1
              with:
                  creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

            - name: Get runner public IP
              id: ip
              run: echo "PUBLIC_IP=$(curl -s https://api.ipify.org)" >> "$GITHUB_OUTPUT"

            - name: Prepare access rules for deploy (enable PNA, split SCM rules, add IP to SCM + MAIN)
              run: |
                  set -e
                  echo "Enabling Public Network Access on $APP (if disabled)..."
                  az resource update -g "$RG" \
                    --name "$APP" \
                    --resource-type "Microsoft.Web/sites" \
                    --set properties.publicNetworkAccess=Enabled

                  echo "Ensure SCM does NOT inherit main-site rules..."
                  az webapp config access-restriction set -g "$RG" -n "$APP" \
                    --use-same-restrictions-for-scm-site false

                  IP="${{ steps.ip.outputs.PUBLIC_IP }}"
                  echo "Allowing ${IP}/32 on SCM and MAIN for $APP..."

                  # Add to SCM (Kudu)
                  az webapp config access-restriction add \
                    -g "$RG" -n "$APP" \
                    --rule-name "gh-scm-${IP}" \
                    --action Allow --ip-address "${IP}/32" \
                    --priority 120 --scm-site true

                  # Add to MAIN site (belt and suspenders)
                  az webapp config access-restriction add \
                    -g "$RG" -n "$APP" \
                    --rule-name "gh-main-${IP}" \
                    --action Allow --ip-address "${IP}/32" \
                    --priority 120

            - name: Deploy to Azure Web App
              id: deploy-to-webapp
              uses: azure/webapps-deploy@v3
              with:
                  app-name: 'cobrabot'
                  slot-name: 'Production'
                  package: .
                  publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B408F1FA702C414EBD92E3521D98D7CE }}

            - name: Remove default Azure files
              run: |
                  echo "Removing default Azure files..."
                  az webapp deployment source config-zip \
                    --resource-group "$RG" \
                    --name "$APP" \
                    --src /dev/null || true

                  # Remove hostingstart.html if it exists
                  az webapp ssh --resource-group "$RG" --name "$APP" \
                    --command "rm -f /home/site/wwwroot/hostingstart.html" || true

            - name: Reset the startup script
              run: |
                  az webapp config set \
                    --name "$APP" \
                    --resource-group "$RG" \
                    --startup-file ""

            - name: Prepare startup script (permissions & line endings)
              run: |
                  if command -v dos2unix >/dev/null 2>&1; then
                    dos2unix azure/azure-startup.sh || true
                  else
                    sed -i 's/\r$//' azure/azure-startup.sh || true
                  fi
                  git update-index --chmod=+x azure/azure-startup.sh || true

            - name: Configure web app for custom startup
              run: |
                  echo "Configuring web app for custom startup..."

                  # Set the runtime stack to PHP 8.4
                  az webapp config set \
                    --name "$APP" \
                    --resource-group "$RG" \
                    --linux-fx-version "PHP|8.4"

                  # Ensure PHP 8.4 is explicitly set
                  az webapp config appsettings set \
                    --name "$APP" --resource-group "$RG" \
                    --settings PHP_VERSION=8.4

            - name: Ensure health check path
              shell: bash
              run: |
                APP_ID=$(az webapp show -g "$RG" -n "$APP" ${SLOT:+--slot "$SLOT"} --query id -o tsv)
                CURRENT=$(az webapp show --ids "$APP_ID" --query "siteConfig.healthCheckPath" -o tsv)
                if [ "$CURRENT" != "/health" ]; then
                  echo "Setting healthCheckPath to /health (was: ${CURRENT:-<empty>})"
                  az webapp update --ids "$APP_ID" --set siteConfig.healthCheckPath="/health"
                else
                  echo "healthCheckPath already /health; skipping"
                fi

            - name: Enable Always On when supported
              shell: bash
              run: |
                APP_INFO=$(az webapp show -g "$RG" -n "$APP" ${SLOT:+--slot "$SLOT"})
                APP_ID=$(jq -r '.id' <<<"$APP_INFO")
                PLAN_ID=$(jq -r '.serverFarmId' <<<"$APP_INFO")
                PLAN_TIER=$(az appservice plan show --ids "$PLAN_ID" --query "sku.tier" -o tsv)

                echo "App Service Plan tier: $PLAN_TIER"
                case "$PLAN_TIER" in
                  Basic|Standard|Premium|PremiumV2|PremiumV3|PremiumV4|Isolated|IsolatedV2)
                    echo "Enabling Always On"
                    az webapp config set --ids "$APP_ID" --always-on true
                    ;;
                  *)
                    echo "Skipping Always On (not supported on '$PLAN_TIER')."
                    ;;
                esac


            - name: Set port 8080
              run: |
                  az webapp config appsettings set \
                    --name "$APP" --resource-group "$RG" \
                    --settings WEBSITES_PORT=8080

            # ---- NGINX override: copy your config and reload on container start ----
            # We replace any previous Startup Command and set a new one that copies our file into place
            # and reloads NGINX. Your file must exist at /home/site/wwwroot/azure/nginx_laravel.conf after deploy.
            - name: Apply custom NGINX config (via Startup Command)
              run: |
                  az webapp config set \
                    --name "$APP" \
                    --resource-group "$RG" \
                    --startup-file "/home/site/wwwroot/azure/azure-startup.sh"

            - name: Restart App Service
              run: |
                  az webapp restart --name "$APP" --resource-group "$RG"

            - name: Deployment Summary and Log Access Instructions
              run: |
                  echo ""
                  echo "🚀 DEPLOYMENT COMPLETED SUCCESSFULLY!"
                  echo "======================================"
                  echo ""
                  echo "📱 Your Laravel application has been deployed to Azure Web App: $APP"
                  echo ""
                  echo "📊 To monitor your application and view logs:"
                  echo ""
                  echo "1️⃣ REAL-TIME LOGS (Recommended):"
                  echo "   Azure Portal: https://portal.azure.com → Web App → $APP → Monitoring → Log stream"
                  echo ""
                  echo "2️⃣ COMMAND LINE LOGS:"
                  echo "   az webapp log tail --name $APP --resource-group $RG"
                  echo ""
                  echo "3️⃣ KUDU DEBUG CONSOLE:"
                  echo "   Azure Portal: Web App → $APP → Development Tools → Kudu → Debug Console"
                  echo ""
                  echo "4️⃣ APPLICATION URL:"
                  echo "   https://$APP.azurewebsites.net"
                  echo ""
                  echo "⚠️  Note: The startup script will run automatically when the web app starts."
                  echo "   You can trigger a restart from the Azure Portal if needed."
                  echo ""
                  echo "🔍 If you see the default Azure page instead of your Laravel app:"
                  echo "   - Check the log stream for startup script errors"
                  echo "   - Verify the startup command was set correctly"
                  echo "   - Restart the web app to re-run the startup script"

            - name: Cleanup temporary IP rules
              if: always()
              run: |
                  IP="${{ steps.ip.outputs.PUBLIC_IP }}"
                  echo "Removing temporary rules for ${IP}..."
                  az webapp config access-restriction remove -g "$RG" -n "$APP" \
                    --rule-name "gh-scm-${IP}" --scm-site true || true
                  az webapp config access-restriction remove -g "$RG" -n "$APP" \
                    --rule-name "gh-main-${IP}" || true

                  # If you normally keep Public Network Access disabled, re-disable it here:
                  # az resource update -g "$RG" --name "$APP" --resource-type "Microsoft.Web/sites" \
                  #   --set properties.publicNetworkAccess=Disabled || true
